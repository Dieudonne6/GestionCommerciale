<?php

namespace Tests\Feature;

use App\Models\CommandeAchat;
use App\Models\ReceptionCmdAchat;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class GestionReceptionsTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_view_receptions_index()
    {
        $response = $this->get(route('receptions.index'));

        $response->assertStatus(200);
        $response->assertViewIs('pages.Fournisseur&Achat.gestion_receptions');
    }

    public function test_can_create_reception()
    {
        $this->withoutExceptionHandling();

        $commande = CommandeAchat::factory()->create(['statutCom' => 'validée']);

        $response = $this->post(route('receptions.store'), [
            'dateC' => now()->format('Y-m-d'),
            'referenceC' => 'BL123',
            'numBordereauLivraison' => 'BORD123',
            'idExercice' => 1,
            'idCommande' => $commande->idCommande,
            'lignes' => [
                [
                    'idDetailCom' => 1,
                    'qteReceptionne' => 5,
                    'prixUnit' => 10.00,
                ],
            ],
        ]);

        $this->assertDatabaseHas('reception_cmd_achats', [
            'reference' => 'BL123',
            'numBordereauLivraison' => 'BORD123',
        ]);

        $response->assertRedirect(route('receptions.index'));
        $response->assertSessionHas('success', 'Réception créée avec succès.');
    }

    public function test_can_edit_reception()
    {
        $reception = ReceptionCmdAchat::factory()->create();

        $response = $this->get(route('receptions.edit', $reception->idRecep));

        $response->assertStatus(200);
        $response->assertViewIs('pages.Fournisseur&Achat.edit_reception');
    }

    public function test_can_update_reception()
    {
        $reception = ReceptionCmdAchat::factory()->create();

        $response = $this->put(route('receptions.update', $reception->idRecep), [
            'dateC' => now()->format('Y-m-d'),
            'referenceC' => 'BL1234',
            'numBordereauLivraison' => 'BORD1234',
            'idExercice' => 1,
            'lignes' => [
                [
                    'idDetailCom' => 1,
                    'qteReceptionne' => 10,
                    'prixUnit' => 15.00,
                ],
            ],
        ]);

        $this->assertDatabaseHas('reception_cmd_achats', [
            'reference' => 'BL1234',
        ]);

        $response->assertRedirect(route('receptions.index'));
        $response->assertSessionHas('success', 'Réception mise à jour avec succès.');
    }

    public function test_can_delete_reception()
    {
        $reception = ReceptionCmdAchat::factory()->create();

        $response = $this->delete(route('receptions.destroy', $reception->idRecep));

        $this->assertDatabaseMissing('reception_cmd_achats', [
            'idRecep' => $reception->idRecep,
        ]);

        $response->assertRedirect(route('receptions.index'));
        $response->assertSessionHas('success', 'Réception supprimée avec succès.');
    }
}